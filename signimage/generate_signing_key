#! /bin/sh
#
# generate a RSA key usable to sign a firmware image, which may pass the signature
# checks in current FRITZ!OS versions and convert the public key to a file, which
# may be included into an own image for later use
#
# This script needs a full-functioning OpenSSL binary ('genrsa' is embedded into 
# FRITZ!OS images, but 'rsa' and 'rsautl' are not available) and a shell version,
# which may use "read -sp" for hidden terminal reads. If your shell does not 
# support such "read" calls (Busybox 1.24.2 knows the needed options), specify the 
# password as argument during call.
#
# We assume enough entropy here ... please make sure there's enough
# randomness, before you call this script and you should be profoundly
# convinced, that your "openssl" binary does not seed the PRNG with any
# fixed value. You should read some values from /dev/random (not
# /dev/urandom, because this is unblocking and may return poor values),
# before you call this script.
# 
# $ dd if=/dev/random bs=1 count=16 status=none | busybox hd
# 00000000  8f 29 47 29 4a b7 95 de  b0 f5 75 52 6c 51 63 4f  |.)G)J.....uRlQcO|
# 00000010
#
# Afterwards the call to 'genrsa' may take some more time, but it should
# get really random values for the key generation. 
#
# You may also generate your own random seed file (default name is 
# image_signing.rnd) to seed the PRNG for the 'genrsa' call. If this file is
# missing, it will be created with 16x16 bytes from /dev/random (time consuming).
#
# The files are generated with fixed names in the current directory.
#
# file name definitions for output files
name_prefix="image_signing"
private_extension="key"
public_extension="pem"
avm_extension="asc"
seed_extension="rnd"
#
if [ -z $1 ]; then
	if ! [ -t 0 ]; then
		echo "Usage: $0 <password>" 2>&1
		echo "Create a 1024 bit RSA key usable to sign image files for AVM routers." 2>&1
		echo "If no password is specified on the command line, it will be read from" 2>&1
		echo "the terminal." 2>&1
		exit 1
	else
		read -sp "Enter a password for the generated key: " KEYPASSWORD
		echo ""
	fi
else
	export KEYPASSWORD="$1"
fi
#
# get even number of hexadecimal digits
#
hex_even()
{
	local value=$1 len count rem
	len=$(printf %x $value)
	count=${#len}
	rem=$(( count % 2 ))
	[ $rem -ne 0 ] && len="0$len"
	echo $len
}
#
# convert hexadecimal string to binary content
#
hex2bin()
{
	local val="$1" out=""
	while [ ${#val} -gt 0 ]; do
		out="$out\x${val:0:2}"
		val="${val:2}"
	done
	printf "$out"
}
#
# encode ASN.1 length field
#
asn1_length()
{
	local len=0 value=$1 res interm
	len=$(( ${#value} / 2 ))
	if [ $len -gt 127 ]; then
		interm=$(hex_even $len)
		len=$(( ( ${#interm} / 2 ) + 128 ))
		res=$(hex_even $len)$interm
	else
		res=$(hex_even $len)
	fi
	echo $res
}
#
# ASN.1 types needed
#
version="$(openssl version)"
if [ $? -eq 127 ]; then
	echo "Missing 'openssl' binary." 2>&1
	exit 1
fi
echo "Found $version" 2>&1
echo -n "Check 'genrsa' command ... " 2>&1
openssl genrsa -dummy 2>&1 | grep -q '^usage: genrsa' 2>/dev/null 1>&2
rc=$?
[ $rc -eq 0 ] && echo "OK" || "echo FAILED"
#
# generate a random seed file with content from /dev/random, it will be used later to
# call "openssl genrsa"
#
if ! [ -f "${name_prefix}.${seed_extension}" ]; then
	echo -n "Generating random seed file from /dev/random (may take some time) ... " 2>&1
	dd if=/dev/random of="${name_prefix}.${seed_extension}" bs=16 count=16 status=none 2>/dev/null
	if [ $rc -ne 0 -o ! -f "${name_prefix}.${seed_extension}" ]; then
		echo "FAILED" 2>&1
	else
		echo "OK" 2>&1
	fi
fi
#
# generate the RSA key first, we need a 1024 bit key (even today and even
# if such keys are considered unsafe this time)
#
echo -n "Generating RSA key as '${name_prefix}.${private_extension}' ... " 2>&1
KEYPASSWORD="${KEYPASSWORD}" openssl genrsa -aes128 -passout env:KEYPASSWORD -out "${name_prefix}.${private_extension}" -rand "${name_prefix}.${seed_extension}" -f4 1024 2>/dev/null
rc=$?
if [ $rc -ne 0 -o ! -f "${name_prefix}.${private_extension}" ]; then
	echo "FAILED" 2>&1
else
	echo "OK" 2>&1
fi
#
# extract public key as PEM file
#
echo -n "Extracting public key to '${name_prefix}.${public_extension}' ... " 2>&1
KEYPASSWORD="${KEYPASSWORD}" openssl rsa -passin env:KEYPASSWORD -pubout -out "${name_prefix}.${public_extension}" -in "${name_prefix}.${private_extension}" 2>/dev/null
rc=$?
if [ $rc -ne 0 -o ! -f "${name_prefix}.${public_extension}" ]; then
	echo "FAILED" 2>&1
else
	echo "OK" 2>&1
fi
#
# extract modulus and exponent to create the AVM formatted public key
#
echo -n "Extracting public key in AVM format to '${name_prefix}.${avm_extension}' ... " 2>&1
# the exponent was set by '-f4' and does not need to be read from file
EXPONENT=010001
openssl rsa -in "${name_prefix}.${public_extension}" -pubin -modulus -noout
eval $(openssl rsa -in "${name_prefix}.${public_extension}" -pubin -modulus -noout)
rc=$?
if [ $rc -ne 0 ]; then
	echo "FAILED" 2>&1
else
	MODULUS="$(echo "$Modulus" | tr 'A-F' 'a-f')"
	first=${MODULUS:0:1}
	# start without highest bit set (to ensure positive number)
	[ "${first/[89a-f]/}" != "$first" ] && MODULUS="00$MODULUS"
	echo $MODULUS >"${name_prefix}.${avm_extension}"
	echo $EXPONENT >>"${name_prefix}.${avm_extension}"
	echo "OK" 2>&1
fi
#
# show some additional info
#
echo ""
echo "You should copy the file '${name_prefix}.${avm_extension}' to your firmware image" 2>&1
echo "as '/etc/avm_firmware_public_key9' to use it for image verification" 2>&1
echo "with AVM components." 2>&1
exit 0
